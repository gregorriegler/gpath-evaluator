{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","changeJson","e","setState","json","target","value","changeExpression","expression","handleResult","result","handleError","error","console","log","onSubmit","preventDefault","evaluate","state","xhr","XMLHttpRequest","that","this","addEventListener","response","JSON","parse","responseText","type","output","message","open","setRequestHeader","send","createRequest","source","className","onChange","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAqHeA,G,kBAhHX,aAAe,IAAD,8BACV,+CAuCJC,WAAa,SAAAC,GACT,EAAKC,SAAS,CAACC,KAAMF,EAAEG,OAAOC,SAzCpB,EA4CdC,iBAAmB,SAAAL,GACf,EAAKC,SAAS,CAACK,WAAYN,EAAEG,OAAOC,SA7C1B,EAgDdG,aAAe,SAAAC,GACX,EAAKP,SAAS,CAACO,OAAQA,KAjDb,EAoDdC,YAAc,SAAAC,GACVC,QAAQC,IAAI,QAASF,GACrB,EAAKT,SAAS,CAACO,OAAQE,KAtDb,EAyDdG,SAAW,SAAAb,GACPA,EAAEc,iBACF,EAAKC,SAAS,EAAKC,MAAMd,KAAM,EAAKc,MAAMV,aAzD1C,EAAKU,MAAQ,CACTd,KAAM,ijBAgCNI,WAAY,gCACZE,OAAQ,IApCF,E,sEA8DLN,EAAMI,GACXK,QAAQC,IAAI,YAAaV,EAAMI,GAC/B,IAAMW,EAAM,IAAIC,eACZC,EAAOC,KACXH,EAAII,iBAAiB,QAAQ,WACzB,IAAIC,EAAWC,KAAKC,MAAMP,EAAIQ,cAC1BC,EAAOJ,EAASK,OAAO,GAAGD,KAC1BE,EAAUN,EAASK,OAAO,GAAGC,QACrB,cAATF,EACCP,EAAKV,YAAYmB,GAEjBT,EAAKZ,aAAaqB,MAG1BX,EAAIY,KAAK,OAAQ,4DACjBZ,EAAIa,iBAAiB,eAAgB,4BACrCb,EAAIc,KAAKX,KAAKY,cAAc9B,EAAMI,M,oCAGxBJ,EAAMI,GAChB,IAAI2B,EAAS,uHAMb,OALAA,GAAU,MACVA,GAAU/B,EACV+B,GAAU,eACVA,GAAU,qBAAuB3B,EAAa,WAC9C2B,GAAU,gB,+BAKV,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,QACX,0BAAMrB,SAAUO,KAAKP,UACjB,8BAAUT,MAAOgB,KAAKJ,MAAMd,KAAMiC,SAAUf,KAAKrB,WAAYqC,YAAY,oBACzE,2BAAOV,KAAK,OAAOtB,MAAOgB,KAAKJ,MAAMV,WAAY6B,SAAUf,KAAKf,iBACzD+B,YAAY,qBACnB,4BAAQV,KAAK,UAAb,cAGR,yBAAKQ,UAAU,UACX,sCACCd,KAAKJ,MAAMR,a,GA1Gd6B,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8ba8ad50.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            json: '[\\n' +\n                '    {\\n' +\n                '        \"code\": \"HQ\",\\n' +\n                '        \"name\": \"Head Quarter\",\\n' +\n                '        \"parent\": null\\n' +\n                '    },\\n' +\n                '    {\\n' +\n                '        \"code\": \"AT\",\\n' +\n                '        \"name\": \"Austria\",\\n' +\n                '        \"parent\": \"HQ\"\\n' +\n                '    },\\n' +\n                '    {\\n' +\n                '        \"code\": \"GB\",\\n' +\n                '        \"name\": \"United Kingdom\",\\n' +\n                '        \"parent\": \"HQ\"\\n' +\n                '    },\\n' +\n                '    {\\n' +\n                '        \"code\": \"FR\",\\n' +\n                '        \"name\": \"France\",\\n' +\n                '        \"parent\": \"HQ\"\\n' +\n                '    },\\n' +\n                '    {\\n' +\n                '        \"code\": \"US\",\\n' +\n                '        \"name\": \"United States\",\\n' +\n                '        \"parent\": \"HQ\"\\n' +\n                '    },\\n' +\n                '    {\\n' +\n                '        \"code\": \"ZZ\",\\n' +\n                '        \"name\": \"Other\",\\n' +\n                '        \"parent\": \"HQ\"\\n' +\n                '    }\\n' +\n                ']',\n            expression: 'findAll{it.code==\\'AT\\'}.parent',\n            result: ''\n        };\n    }\n\n    changeJson = e => {\n        this.setState({json: e.target.value})\n    };\n\n    changeExpression = e => {\n        this.setState({expression: e.target.value})\n    };\n\n    handleResult = result => {\n        this.setState({result: result})\n    };\n\n    handleError = error => {\n        console.log(\"error\", error)\n        this.setState({result: error})\n    };\n\n    onSubmit = e => {\n        e.preventDefault();\n        this.evaluate(this.state.json, this.state.expression);\n    };\n\n    evaluate(json, expression) {\n        console.log('evaluated', json, expression);\n        const xhr = new XMLHttpRequest();\n        let that = this;\n        xhr.addEventListener('load', () => {\n            let response = JSON.parse(xhr.responseText);\n            let type = response.output[0].type;\n            let message = response.output[0].message;\n            if(type === 'EXCEPTION') {\n                that.handleError(message);\n            } else {\n                that.handleResult(message);\n            }\n        });\n        xhr.open('POST', 'https://cors.bridged.cc/https://groovyide.com/api/v1/run')\n        xhr.setRequestHeader('content-type', 'text/plain;charset=UTF-8')\n        xhr.send(this.createRequest(json, expression))\n    };\n\n    createRequest(json, expression) {\n        let source = \"import groovy.json.JsonSlurper\\r\\n\\r\\ndef jsonSlurper = new JsonSlurper()\\r\\ndef object = jsonSlurper.parseText(\\r\\n\";\n        source += \"\\\"\\\"\\\"\";\n        source += json;\n        source += \"\\\"\\\"\\\")\\r\\n\\r\\n\";\n        source += \"def test = object.\" + expression + \"\\r\\n\\r\\n\";\n        source += \"print(test)\";\n        return source;\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"form\">\n                    <form onSubmit={this.onSubmit}>\n                        <textarea value={this.state.json} onChange={this.changeJson} placeholder=\"enter json here\"/>\n                        <input type=\"text\" value={this.state.expression} onChange={this.changeExpression}\n                               placeholder=\"gpath expression\"/>\n                        <button type=\"submit\">evaluate</button>\n                    </form>\n                </div>\n                <div className=\"result\">\n                    <h1>Result</h1>\n                    {this.state.result}\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}